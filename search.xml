<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++内存分区模型</title>
      <link href="/archives/aa169648.html"/>
      <url>/archives/aa169648.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​    <strong>代码区：</strong></p><p>​        存放 CPU 执行的机器指令</p><p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​    <strong>全局区：</strong></p><p>​        全局变量和静态变量存放在此.</p><p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​        ==该区域的数据在程序结束后由操作系统释放==</p><p><strong>示例</strong></p><p><code>//全局变量</code><br><code>int g_a = 10;</code><br><code>int g_b = 10;</code></p><p><code>//全局常量</code><br><code>const int c_g_a = 10;</code><br><code>const int c_g_b = 10;</code></p><p><code>int main() &#123;</code></p><p> <code>//局部变量</code><br> <code>int a = 10;</code><br> <code>int b = 10;</code></p><p> <code>//打印地址</code><br> <code>cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;</code><br> <code>cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;</code></p><p> <code>cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;</code><br> <code>cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;</code></p><p> <code>//静态变量</code><br> <code>static int s_a = 10;</code><br> <code>static int s_b = 10;</code></p><p> <code>cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;</code><br> <code>cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;</code></p><p> <code>cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;</code><br> <code>cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;</code></p><p> <code>cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;</code><br> <code>cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;</code></p><p> <code>const int c_l_a = 10;</code><br> <code>const int c_l_b = 10;</code><br> <code>cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;</code><br> <code>cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;</code></p><p> <code>system(&quot;pause&quot;);</code></p><p> <code>return 0;</code><br><code>&#125;</code></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><p><strong>栈区：</strong></p><p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例</strong></p><p><code>int * func()</code><br><code>&#123;</code><br> <code>int a = 10;</code><br> <code>return &amp;a;</code><br><code>&#125;</code></p><p><code>int main() &#123;</code></p><p> <code>int *p = func();</code></p><p> <code>cout &lt;&lt; *p &lt;&lt; endl;</code><br> <code>cout &lt;&lt; *p &lt;&lt; endl;</code></p><p> <code>system(&quot;pause&quot;);</code></p><p> <code>return 0;</code><br><code>&#125;</code></p><p><strong>堆区：</strong></p><p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​        在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><p><code>int* func()</code><br><code>&#123;</code><br> <code>int* a = new int(10);</code><br> <code>return a;</code><br><code>&#125;</code></p><p><code>int main() &#123;</code></p><p> <code>int *p = func();</code></p><p> <code>cout &lt;&lt; *p &lt;&lt; endl;</code><br> <code>cout &lt;&lt; *p &lt;&lt; endl;</code></p><p> <code>system(&quot;pause&quot;);</code></p><p> <code>return 0;</code><br><code>&#125;</code></p><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p><p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p><p>​    语法：<code> new 数据类型</code></p><p>​    利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><p><code>int* func()</code><br><code>&#123;</code><br> <code>int* a = new int(10);</code><br> <code>return a;</code><br><code>&#125;</code></p><p><code>int main() &#123;</code></p><p> <code>int *p = func();</code></p><p> <code>cout &lt;&lt; *p &lt;&lt; endl;</code><br> <code>cout &lt;&lt; *p &lt;&lt; endl;</code></p><p> <code>//利用delete释放堆区数据</code><br> <code>delete p;</code></p><p> <code>//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</code></p><p> <code>system(&quot;pause&quot;);</code></p><p> <code>return 0;</code><br><code>&#125;</code></p><p><strong>示例2：开辟数组</strong></p><p><code>//堆区开辟数组</code><br><code>int main() &#123;</code></p><p> <code>int* arr = new int[10];</code></p><p> <code>for (int i = 0; i &lt; 10; i++)</code><br> <code>&#123;</code><br>  <code>arr[i] = i + 100;</code><br> <code>&#125;</code></p><p> <code>for (int i = 0; i &lt; 10; i++)</code><br> <code>&#123;</code><br>  <code>cout &lt;&lt; arr[i] &lt;&lt; endl;</code><br> <code>&#125;</code><br> <code>//释放数组 delete 后加 []</code><br> <code>delete[] arr;</code></p><p> <code>system(&quot;pause&quot;);</code></p><p> <code>return 0;</code><br><code>&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/16107.html"/>
      <url>/archives/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
